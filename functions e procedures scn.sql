CREATE OR REPLACE PROCEDURE CRIAR_USUARIO(
    P_NOME_USUARIO VARCHAR,
    P_EMAIL_USUARIO VARCHAR,
    P_SENHA_USUARIO VARCHAR,
    P_TIPO_USUARIO VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO USUARIOS (NOME, EMAIL, SENHA, TIPO_USUARIO)
    VALUES (P_NOME_USUARIO, P_EMAIL_USUARIO, P_SENHA_USUARIO, P_TIPO_USUARIO);
END;
$$;

--------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION CRIAR_AVALIACAO(
    P_TITULO_AVALIACAO VARCHAR,
    P_DESCRICAO_AVALIACAO TEXT,
    P_DATA_ENTREGA_AVALIACAO TIMESTAMP,
    P_ID_PROFESSOR INTEGER
) 
RETURNS INTEGER 
AS $$
DECLARE
    V_NOVO_ID INTEGER;
BEGIN
    INSERT INTO AVALIACOES (TITULO, DESCRICAO, DATA_ENTREGA, PROFESSOR_ID)
    VALUES (P_TITULO_AVALIACAO, P_DESCRICAO_AVALIACAO, P_DATA_ENTREGA_AVALIACAO, P_ID_PROFESSOR)
    RETURNING ID_AVALIACAO INTO V_NOVO_ID;
    
    RETURN V_NOVO_ID;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION CRIAR_ENTREGA(
    P_ID_ALUNO INTEGER,
    P_ID_AVALIACAO INTEGER,
    P_CONTEUDO_ENTREGA TEXT
) 
RETURNS INTEGER 
AS $$
DECLARE
    V_NOVO_ID INTEGER;
BEGIN
    INSERT INTO ENTREGAS (ALUNO_ID, AVALIACAO_ID, CONTEUDO)
    VALUES (P_ID_ALUNO, P_ID_AVALIACAO, P_CONTEUDO_ENTREGA)
    RETURNING ID_ENTREGA INTO V_NOVO_ID;
    
    RETURN V_NOVO_ID;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION LANCAR_NOTA(
    P_ID_ENTREGA INTEGER,
    P_VALOR_NOTA DOUBLE PRECISION,
    P_FEEDBACK_NOTA TEXT
) 
RETURNS INTEGER 
AS $$
DECLARE
    V_NOVO_ID INTEGER;
BEGIN
    INSERT INTO NOTAS (ENTREGA_ID, NOTA, FEEDBACK)
    VALUES (P_ID_ENTREGA, P_VALOR_NOTA, P_FEEDBACK_NOTA)
    RETURNING ID_NOTA INTO V_NOVO_ID;
    
    RETURN V_NOVO_ID;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXISTE_AVALIACAO(P_ID_AVALIACAO INTEGER)
RETURNS BOOLEAN
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM AVALIACOES
        WHERE ID_AVALIACAO = P_ID_AVALIACAO
    );
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION OBTER_USUARIO_POR_EMAIL(P_EMAIL_USUARIO VARCHAR)
RETURNS TABLE (
    ID_USUARIO INTEGER,
    NOME VARCHAR,
    EMAIL VARCHAR,
    SENHA VARCHAR,
    TIPO_USUARIO VARCHAR
) 
AS $$
BEGIN
    RETURN QUERY
    SELECT
        U.ID_USUARIO,
        U.NOME,
        U.EMAIL,
        U.SENHA,
        U.TIPO_USUARIO
    FROM USUARIOS U
    WHERE U.EMAIL = P_EMAIL_USUARIO;
END;
$$ LANGUAGE plpgsql;


------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXISTE_ENTREGA_PARA_AVALIACAO(P_ID_AVALIACAO INTEGER, P_ID_ALUNO INTEGER)
RETURNS BOOLEAN
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM ENTREGAS
        WHERE AVALIACAO_ID = P_ID_AVALIACAO AND ALUNO_ID = P_ID_ALUNO
    );
END;
$$ LANGUAGE plpgsql;

------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXISTE_ENTREGA(P_ID_ENTREGA INTEGER)
RETURNS BOOLEAN
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM ENTREGAS
        WHERE P_ID_ENTREGA = ID_ENTREGA
    );
END;
$$ LANGUAGE plpgsql;

-----------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXISTE_NOTA_NA_ENTREGA(P_ID_ENTREGA INTEGER)
RETURNS BOOLEAN
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM ENTREGAS E
        INNER JOIN NOTAS N
        ON E.ID_ENTREGA = N.ENTREGA_ID
        WHERE P_ID_ENTREGA = ID_ENTREGA
    );
END;
$$ LANGUAGE plpgsql;

-------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION VALIDAR_TEMPO_DA_ENTREGA(P_DATA_ENTREGA TIMESTAMP, P_ID_AVALIACAO INTEGER)
RETURNS BOOLEAN
AS $$
DECLARE
    V_DATA_AVALIACAO TIMESTAMP;
BEGIN
    SELECT DATA_ENTREGA
    INTO V_DATA_AVALIACAO
    FROM AVALIACOES
    WHERE ID_AVALIACAO = P_ID_AVALIACAO;

    IF (V_DATA_AVALIACAO > P_DATA_ENTREGA) THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$ LANGUAGE plpgsql;

-------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION LISTAR_AVALIACOES()
RETURNS TABLE (
    ID_AVALIACAO INTEGER,
    TITULO VARCHAR,
    DESCRICAO TEXT,
    DATA_CRIACAO TIMESTAMP,
    DATA_ENTREGA TIMESTAMP,
    PROFESSOR_NOME VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        A.ID_AVALIACAO,
        A.TITULO,
        A.DESCRICAO,
        A.DATA_CRIACAO,
        A.DATA_ENTREGA,
        U.NOME AS PROFESSOR_NOME
    FROM 
        AVALIACOES A
    INNER JOIN 
        USUARIOS U ON A.PROFESSOR_ID = U.ID_USUARIO
    WHERE 
        U.TIPO_USUARIO = 'PROFESSOR';
END;
$$ LANGUAGE plpgsql;

------------------------------------------------------------------

CREATE OR REPLACE FUNCTION VERIFICAR_ENTREGA_ASSOCIADA(
    P_USUARIO_ID INT,
    P_ENTREGA_ID INT
)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 
        FROM ENTREGAS 
        WHERE ALUNO_ID = P_USUARIO_ID 
        AND ID_ENTREGA = P_ENTREGA_ID
    );
END;
$$ LANGUAGE plpgsql;

------------------------------------------------------------------

CREATE OR REPLACE FUNCTION RETORNAR_INFORMACOES_NOTA_ENTREGA(
    P_ENTREGA_ID INT
)
RETURNS TABLE (
    ID_NOTA INT,
    ENTREGA_ID INT,
    NOTA NUMERIC,
    FEEDBACK TEXT,
    DATA_ATRIBUICAO TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        ID_NOTA,
        ENTREGA_ID,
        NOTA,
        FEEDBACK,
        DATA_ATRIBUICAO
    FROM NOTAS
    WHERE ENTREGA_ID = P_ENTREGA_ID;
END;
$$ LANGUAGE plpgsql;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION LISTAR_ENTREGAS_POR_AVALIACAO(
    P_AVALIACAO_ID INT
)
RETURNS TABLE (
    ID_ENTREGA INT,
    NOME_ALUNO VARCHAR,
    EMAIL_ALUNO VARCHAR,
    AVALIACAO_ID INT,
    DATA_SUBMISSAO TIMESTAMP,
    CONTEUDO TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        E.ID_ENTREGA,
        U.NOME AS NOME_ALUNO,
        U.EMAIL AS EMAIL_ALUNO,
        E.AVALIACAO_ID,
        E.DATA_SUBMISSAO,
        E.CONTEUDO
    FROM ENTREGAS E
    INNER JOIN USUARIOS U ON E.ALUNO_ID = U.ID_USUARIO  
    WHERE E.AVALIACAO_ID = P_AVALIACAO_ID;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION VERIFICAR_PROFESSOR_AVALIACAO(
    P_PROFESSOR_ID INT,
    P_AVALIACAO_ID INT
)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 
        FROM AVALIACOES A
        WHERE A.PROFESSOR_ID = P_PROFESSOR_ID 
        AND A.ID_AVALIACAO = P_AVALIACAO_ID
    );
END;
$$ LANGUAGE plpgsql;

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PUBLIC.RELACAO_ENTREGA_PROFESSOR(
    P_ID_PROFESSOR INTEGER,
    P_ID_ENTREGA INTEGER
)
RETURNS BOOLEAN
LANGUAGE 'plpgsql'
COST 100
VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM ENTREGAS E
        INNER JOIN AVALIACOES AV ON E.AVALIACAO_ID = AV.ID_AVALIACAO
        INNER JOIN USUARIOS U ON AV.PROFESSOR_ID = U.ID_USUARIO
        WHERE P_ID_PROFESSOR = U.ID_USUARIO 
        AND P_ID_ENTREGA = E.ID_ENTREGA
    );
END;
$BODY$;

ALTER FUNCTION PUBLIC.RELACAO_ENTREGA_PROFESSOR(INTEGER, INTEGER)
OWNER TO POSTGRES;

--------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXISTE_USUARIO(P_EMAIL_USUARIO VARCHAR)
RETURNS BOOLEAN
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM USUARIOS
        WHERE EMAIL = P_EMAIL_USUARIO
    );
END;
$$ LANGUAGE plpgsql;
